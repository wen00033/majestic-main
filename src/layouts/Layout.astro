---
interface Props {
  title: string;
}

const { title } = Astro.props;
import Header from "../components/Header";
---

<html lang="en" class="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>

  <body>
    <Header data={title} client:load />
    <main>
      <div class="wrapper">
        <slot />
      </div>
    </main>
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>

<style is:global>
  * {
    padding: 0;
    margin: 0;
  }
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }
  ul,
  ol {
    list-style-type: none;
  }
  a {
    text-decoration: none;
    color: var(--color);
    text-transform: uppercase;
    font-weight: 900;
  }

  body {
    font-family: "Lato", sans-serif;
  }
  .dark {
    --color: white;
    --header-color: rgb(82, 82, 82);
    background-color: black;
    color: white;
  }
  .light {
    --color: black;
    --header-color: rgb(61, 134, 163);
    background-color: skyblue;
    color: black;
  }
  header {
    background-color: var(--header-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
  }
  .nav-link {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5rem;
  }
  .nav-link-items {
    display: flex;
    gap: 0.5rem;
  }

  .buttonToggle {
    transition: all 200ms ease-out;
    border-radius: 0.2rem;
    text-transform: uppercase;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0.2rem;
    gap: 0.5rem;

    height: fit-content;
  }
  .buttonToggle:hover {
    transform: scale(1.1);
    box-shadow: 1px 1px 2px black;
  }
  main {
    display: grid;
  }
  .wrapper {
    margin: 1rem auto;
  }

  button {
    background-color: var(--header-color);
  }
</style>
